name: 仅同步代码到Gitee  # 工作流名称，清晰标识用途
on:
  push:  # 触发条件：当GitHub仓库有代码推送时（如手机版修改提交后）
    branches: [ master ]  # 同步的分支（根据你的主分支修改，如master）
  workflow_dispatch:  # 支持手动触发（可选，方便测试）

jobs:
  sync-code-to-gitee:
    runs-on: ubuntu-latest  # 使用轻量的Ubuntu环境
    steps:
      # 步骤1：拉取GitHub当前仓库的代码（仅拉取，不做任何编译）
      - name: 拉取GitHub代码
        uses: actions/checkout@v4  # 官方拉取代码的Action，轻量无冗余
        with:
          fetch-depth: 0  # 拉取所有历史提交（确保完整同步，避免遗漏）

      # 步骤2：配置SSH密钥，授权访问Gitee
      - name: 配置Gitee SSH授权
        env:
          GITEE_SSH_KEY: ${{ secrets.GITEE_SSH_KEY }}  # 引用之前配置的私钥
        run: |
          # 在GitHub的运行环境中创建SSH目录和私钥文件
          mkdir -p ~/.ssh
          echo "$GITEE_SSH_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519  # 设置私钥权限（必须，否则SSH拒绝使用）
          # 信任Gitee的SSH主机（避免首次连接时的交互确认）
          ssh-keyscan gitee.com >> ~/.ssh/known_hosts

      # 步骤3：将GitHub代码推送到Gitee仓库（核心同步步骤）
      - name: 推送代码到Gitee
        env:
          GITEE_USERNAME: ${{ secrets.GITEE_USERNAME }}  # 引用Gitee用户名
          GITHUB_REPO_NAME: ${{ github.repository_name }}  # 自动获取GitHub仓库名（无需手动改）
        run: |
          # 设置Git提交者信息（推送时需要）
          git config --global user.name "GitHub Action 同步"
          git config --global user.email "action@github.com"
          # 添加Gitee仓库为远程地址（地址格式：git@gitee.com:用户名/仓库名.git）
          git remote add gitee git@gitee.com:${GITEE_USERNAME}/${GITHUB_REPO_NAME}.git
          # 强制推送当前分支到Gitee（确保Gitee代码与GitHub完全一致，避免冲突）
          git push -f gitee master  # 分支名需与上方on.push.branches保持一致
